@page
@model WebApplication1.Pages.ViewAccountSummaryModel
@{
}



<div class="container">
    <!-- Account Summary -->
    <div class="card">
        <div class="card-header">
            <h3>Account Summary</h3>
        </div>
        <div class="card-body">
            <h4>Account Number: <span class="text-muted" id="accountNumber">1234567</span></h4>
            <h4>Account Holder: <span class="text-muted">John Doe</span></h4>
            <h4>Balance: <span class="text-success">$5,000.00</span></h4>
        </div>
    </div>

    <!-- Recent Transactions -->
    <div class="card">
        <div class="card-header">
            <h3>Recent Transactions</h3>
        </div>
        <div class="card-body">
            <table class="table table-bordered table-hover transaction-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Description</th>
                        <th>Amount</th>
                        <th>Balance</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>2024-08-25</td>
                        <td>Purchase at ABC Store</td>
                        <td class="text-danger">-$50.00</td>
                        <td>$4,950.00</td>
                    </tr>
                    <tr>
                        <td>2024-08-24</td>
                        <td>Deposit from Employer</td>
                        <td class="text-success">+$1,000.00</td>
                        <td>$5,000.00</td>
                    </tr>
                    <tr>
                        <td>2024-08-22</td>
                        <td>Transfer to Savings</td>
                        <td class="text-danger">-$200.00</td>
                        <td>$4,000.00</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Transfer Facility -->
    <div class="card">
        <div class="card-header">
            <h3>Transfer Funds</h3>
        </div>
        <div class="card-body">
            <form id="transferForm">
                <div class="form-group">
                    <label for="fromAccount">From Account Number</label>
                    <input type="text" class="form-control disabled-input" id="fromAccount" disabled value="1234567">
                </div>
                <div class="form-group">
                    <label for="recipientAccount">Recipient Account Number</label>
                    <input type="text" class="form-control" id="recipientAccount" placeholder="Enter recipient account number" required>
                    <div class="invalid-feedback" id="recipientAccountFeedback"></div>
                </div>
                <div class="form-group">
                    <label for="transferAmount">Amount</label>
                    <input type="number" class="form-control" id="transferAmount" placeholder="Enter amount" required min="0.01" step="0.01">
                    <div class="invalid-feedback" id="transferAmountFeedback"></div>
                </div>
                <div class="form-group">
                    <label for="transferDescription">Description (Optional)</label>
                    <textarea class="form-control" id="transferDescription" rows="3" placeholder="Enter description or notes"></textarea>
                </div>
                <button type="submit" class="btn btn-primary">Transfer</button>
            </form>
            <!-- Alert messages -->
            <div id="alertContainer" class="mt-3"></div>
        </div>
    </div>
</div>

<script>
 
    $(document).ready(function () {

        // Utility function to convert a string to an ArrayBuffer
        async function strToArrayBuffer(str) {
            const encoder = new TextEncoder();
            return encoder.encode(str);
        }

        // Utility function to convert an ArrayBuffer to a base64 string
        function arrayBufferToBase64(buffer) {
            let binary = '';
            const bytes = new Uint8Array(buffer);
            const len = bytes.byteLength;
            for (let i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }

        // Function to add PKCS7 padding
        function pkcs7Pad(buffer) {
            const blockSize = 16;
            const paddingRequired = blockSize - (buffer.byteLength % blockSize);
            const paddedLength = buffer.byteLength + paddingRequired;
            const paddedArray = new Uint8Array(paddedLength);
            paddedArray.set(new Uint8Array(buffer));
            paddedArray.fill(paddingRequired, buffer.byteLength);
            return paddedArray;
        }

        // Convert base64 string to Uint8Array
        function base64ToUint8Array(base64) {
            const binaryString = window.atob(base64);
            const len = binaryString.length;
            const bytes = new Uint8Array(len);
            for (let i = 0; i < len; i++) {
                bytes[i] = binaryString.charCodeAt(i);
            }
            return bytes;
        }

        // Encrypt function
        async function encryptData(data, keyBase64, ivBase64) {
            const keyBuffer = base64ToUint8Array(keyBase64);
            const ivBuffer = base64ToUint8Array(ivBase64);

            // Ensure IV is exactly 16 bytes
            if (ivBuffer.length !== 16) {
                throw new Error("IV length is incorrect. IV must be exactly 16 bytes.");
            }

            const key = await crypto.subtle.importKey(
                'raw',
                keyBuffer,
                'AES-CBC',
                false,
                ['encrypt']
            );

            const dataBuffer = await strToArrayBuffer(data);
            const paddedData = pkcs7Pad(dataBuffer);
            const encryptedBuffer = await crypto.subtle.encrypt(
                {
                    name: 'AES-CBC',
                    iv: ivBuffer
                },
                key,
                paddedData
            );

            return arrayBufferToBase64(encryptedBuffer);
        }

        // Handle form submission
        $('#transferForm').on('submit', function (event) {
            event.preventDefault(); // Prevent form submission and page reload

            // Clear previous validation states
            $('#recipientAccount').removeClass('is-invalid');
            $('#transferAmount').removeClass('is-invalid');
            $('#recipientAccountFeedback').text('');
            $('#transferAmountFeedback').text('');

            // Retrieve form data
            var fromAccount = $('#fromAccount').val();
            var recipientAccount = $('#recipientAccount').val().trim();
            var transferAmount = $('#transferAmount').val().trim();
            var transferDescription = $('#transferDescription').val().trim();

            // Validate inputs
            var isValid = true;

            if (!recipientAccount) {
                $('#recipientAccount').addClass('is-invalid');
                $('#recipientAccountFeedback').text('Recipient account number is required.');
                isValid = false;
            }

            if (!transferAmount || parseFloat(transferAmount) <= 0) {
                $('#transferAmount').addClass('is-invalid');
                $('#transferAmountFeedback').text('A valid amount is required.');
                isValid = false;
            }

            if (!isValid) {
                return; // Prevent form submission if validation fails
            }

            // Sample Base64-encoded key and IV (replace these with actual values from your API)
            var keyBase64 = 'MDEyMzQ1Njc4OWFiY2RlZjAxMjM0NTY3ODlhYmNkZWY='; // base64 encoded key
            var ivBase64 = 'YWJjZGVmMDEyMzQ1Njc4OQ=='; // base64 encoded IV (should decode to 16 bytes)

            const sampledata = fromAccount + '-' + recipientAccount + '-' + transferAmount + '-' + transferDescription +'-Closing';

            encryptData(sampledata, keyBase64, ivBase64).then(encryptedData => {
                console.log('Encrypted Data (base64):', encryptedData);

                // Prepare data for API call
                var data = {
                    EncryptedData: encryptedData
                };

                // Make AJAX call
                $.ajax({
                    url: 'http://localhost:5049/api/Transactions/transfer',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function (response) {
                        $('#alertContainer').html('<div class="alert alert-success">Transfer successful!</div>');
                    },
                    error: function (xhr, status, error) {
                        $('#alertContainer').html('<div class="alert alert-danger">An error occurred: ' + error + '</div>');
                    }
                });
            }).catch(error => {
                console.error('Encryption failed:', error);
                $('#alertContainer').html('<div class="alert alert-danger">An error occurred during encryption.</div>');
            });
        });
    });




</script>

<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<!-- Include CryptoJS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>


